apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Release.Name }}
  labels:
    app.kubernetes.io/name: {{ .Chart.Name }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/version: {{ .Chart.AppVersion | quote }}
    app.kubernetes.io/component: application
    app.kubernetes.io/managed-by: helm
spec:
  replicas: {{ .Values.replicas }}
  selector:
    matchLabels:
      app: {{ .Release.Name }}
  template:
    metadata:
      annotations:
        prometheus.io/scrape: "{{ .Values.metrics.enabled }}"
        prometheus.io/path: "{{ .Values.metrics.path }}"
        prometheus.io/port: "{{ .Values.ports.internal }}"
      labels:
        app: {{ .Release.Name }}
        app.kubernetes.io/name: {{ .Chart.Name }}
        app.kubernetes.io/instance: {{ .Release.Name }}
        app.kubernetes.io/version: {{ .Chart.AppVersion | quote }}
        app.kubernetes.io/component: application
        app.kubernetes.io/managed-by: helm
    spec:
      containers:
        - name: {{ .Release.Name }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          resources:
            requests:
              memory: "{{ .Values.resources.requests.memory }}"
              cpu: "{{ .Values.resources.requests.cpu }}"
            limits:
              memory: "{{ .Values.resources.limits.memory }}"
              cpu: "{{ .Values.resources.limits.cpu }}"
          env:
            - name: SPRING_PROFILES_ACTIVE
              value: "{{ .Values.profile }}"
            {{- if .Values.database.name }}
            - name: DATABASE_NAME
              value: "{{ .Values.database.name }}"
            {{- end }}
            - name: DATABASE_HOST
              value: "{{ .Values.database.host }}"
            - name: DATABASE_PORT
              value: "{{ .Values.database.port }}"
            - name: DATABASE_USER
              value: "{{ .Values.database.username }}"
            - name: DATABAES_PASSWORD
              value: "{{ .Values.database.password }}"
            - name: CIRCUIT_BREAKER_ENABLED
              value: "{{ .Values.circuitBreaker.enabled }}"
            - name: JAEGER_ENABLED
              value: "{{ .Values.jaeger.enabled }}"
            {{- if .Values.jaeger.enabled }}
            {{- if .Values.jaeger.application.host }}
            - name: JAEGER_HOST
              value: "{{ .Values.jaeger.application.host }}"
            {{- end }}
            {{- if .Values.jaeger.application.port }}
            - name: JAEGER_PORT
              value: "{{ .Values.jaeger.application.port }}"
            {{- end }}
            {{- end }}
            {{- range $env := .Values.environments }}
            - name: {{ $env.name }}
              value: "{{ $env.value }}"
            {{- end }}
            {{- range $secret := .Values.secrets }}
            - name: {{ $secret.name }}
              valueFrom:
                secretKeyRef:
                  name: {{ $secret.secretName }}
                  key: {{ $secret.secretKey }}
            {{- end }}
          livenessProbe:
            initialDelaySeconds: {{ .Values.liveness.delay }}
            periodSeconds: {{ .Values.liveness.timeout }}
            failureThreshold: 10
            httpGet:
              path: {{ .Values.liveness.path }}
              port: {{ .Values.ports.internal }}
          readinessProbe:
            initialDelaySeconds: {{ .Values.readiness.delay }}
            periodSeconds: {{ .Values.readiness.timeout }}
            failureThreshold: 10
            httpGet:
              path: {{ .Values.readiness.path }}
              port: {{ .Values.ports.internal }}
          ports:
            - name: {{ .Chart.Name }}
              containerPort: {{ .Values.ports.internal }}
          {{- if .Values.filebeat.enabled }}
          volumeMounts:
            - name: {{ .Chart.Name }}-logs-volume
              mountPath: "/var/log/{{ .Values.logFolder | default .Release.Name }}/"
          {{- end }}
        {{- if .Values.filebeat.enabled }}
        - name: {{ .Release.Name }}-filebeat
          image: "{{ .Values.filebeat.image.repository }}:{{ .Values.filebeat.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          resources:
            requests:
              memory: "{{ .Values.filebeat.resources.requests.memory }}"
              cpu: "{{ .Values.filebeat.resources.requests.cpu }}"
            limits:
              memory: "{{ .Values.filebeat.resources.limits.memory }}"
              cpu: "{{ .Values.filebeat.resources.limits.cpu }}"
          volumeMounts:
            - name: {{ .Chart.Name }}-logs-volume
              mountPath: "/var/log/{{ .Values.logFolder | default .Release.Name }}/"
            - name: {{ .Chart.Name }}-config-volume
              mountPath: /usr/share/filebeat/filebeat.yml
              subPath: filebeat.yml
        {{- end }}
        {{- if .Values.jaeger.enabled }}
        - name: {{ .Release.Name }}-jaeger-agent
          image: "{{ .Values.jaeger.image.repository }}:{{ .Values.jaeger.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          env:
            - name: REPORTER_GRPC_HOST_PORT
              value: "{{ .Values.jaeger.collector.host }}:{{ .Values.jaeger.collector.port }}"
          ports:
            - name: thrift-compact
              containerPort: {{ .Values.jaeger.ports.compactThrift }}
              protocol: UDP
            - name: trift-binary
              containerPort: {{ .Values.jaeger.ports.binaryThrift }}
              protocol: UDP
            - name: admin
              containerPort: {{ .Values.jaeger.ports.admin }}
              protocol: TCP
          resources:
            requests:
              memory: "{{ .Values.filebeat.resources.requests.memory }}"
              cpu: "{{ .Values.filebeat.resources.requests.cpu }}"
            limits:
              memory: "{{ .Values.filebeat.resources.limits.memory }}"
              cpu: "{{ .Values.filebeat.resources.limits.cpu }}"
      {{- end }}
      volumes:
        - name: {{ .Chart.Name }}-logs-volume
        - name: {{ .Chart.Name }}-config-volume
          configMap:
            name: {{ .Release.Name }}
            defaultMode: 420
